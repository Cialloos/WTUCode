#include <iostream>
#include <string>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

class SocialNetwork {
private:
    set<string> users;  // 所有用户
    map<string, set<string>> follows;  // 关注关系：用户 -> 他关注的用户
    map<string, set<string>> followers; // 被关注关系：用户 -> 关注他的人

public:
    // 添加用户
    void addUser(const string& user) {
        if (users.count(user)) {
            cout << "用户已存在\n";
            return;
        }
        users.insert(user);
        cout << "添加用户成功：" << user << endl;
    }

    // 删除用户
    void deleteUser(const string& user) {
        if (!users.count(user)) {
            cout << "用户不存在\n";
            return;
        }
        users.erase(user);
        // 清除用户的关注和被关注记录
        for (auto& f : follows[user])
            followers[f].erase(user);
        for (auto& f : followers[user])
            follows[f].erase(user);
        follows.erase(user);
        followers.erase(user);
        cout << "删除用户成功：" << user << endl;
    }

    // 添加关注
    void follow(const string& a, const string& b) {
        if (!users.count(a) || !users.count(b)) {
            cout << "用户不存在\n";
            return;
        }
        if (a == b) {
            cout << "不能关注自己\n";
            return;
        }
        follows[a].insert(b);
        followers[b].insert(a);
        cout << a << " 关注了 " << b << endl;
    }

    // 取消关注
    void unfollow(const string& a, const string& b) {
        if (!follows[a].count(b)) {
            cout << a << " 没有关注 " << b << endl;
            return;
        }
        follows[a].erase(b);
        followers[b].erase(a);
        cout << a << " 取消关注 " << b << endl;
    }

    // 查看 A 是否关注 B
    bool isFollowing(const string& a, const string& b) {
        return follows[a].count(b);
    }

    // 获取 A 的所有关注者
    void printFollowers(const string& user) {
        if (!users.count(user)) return;
        cout << user << " 的粉丝：";
        for (const auto& f : followers[user])
            cout << f << " ";
        cout << endl;
    }

    // 获取 A 的所有关注对象
    void printFollows(const string& user) {
        if (!users.count(user)) return;
        cout << user << " 关注了：";
        for (const auto& f : follows[user])
            cout << f << " ";
        cout << endl;
    }

    // 社交分析：共同关注
    void commonFollows(const string& a, const string& b) {
        set<string> result;
        set_intersection(follows[a].begin(), follows[a].end(),
                         follows[b].begin(), follows[b].end(),
                         inserter(result, result.begin()));
        cout << a << " 和 " << b << " 的共同关注：";
        for (auto& u : result) cout << u << " ";
        cout << endl;
    }

    // 社交分析：可能认识的人（差集）
    void possibleFriends(const string& a) {
        set<string> diff;
        for (const auto& user : users) {
            if (user != a && !follows[a].count(user))
                diff.insert(user);
        }
        cout << a << " 可能认识的人：";
        for (auto& u : diff) cout << u << " ";
        cout << endl;
    }

    // 社交分析：影响力最大的人（被最多人关注）
    void mostInfluential() {
        string most;
        size_t maxCount = 0;
        for (const auto& [user, fans] : followers) {
            if (fans.size() > maxCount) {
                maxCount = fans.size();
                most = user;
            }
        }
        cout << "最有影响力的用户是：" << most << "（" << maxCount << "个粉丝）" << endl;
    }
};
int main() {
    SocialNetwork sn;
    sn.addUser("A");
    sn.addUser("B");
    sn.addUser("C");
    sn.addUser("D");

    sn.follow("A", "B");
    sn.follow("A", "C");
    sn.follow("B", "C");
    sn.follow("C", "D");

    sn.printFollows("A");
    sn.printFollowers("C");

    sn.commonFollows("A", "B");
    sn.possibleFriends("A");
    sn.mostInfluential();

    sn.unfollow("A", "B");
    sn.printFollows("A");

    sn.deleteUser("C");
    sn.printFollowers("D");

    return 0;
}
